<?php
namespace PHPPeru\Test\Exam;

use PHPPeru\Exam\SimpleExam;

/**
 * Test class for SimpleExam.
 * Generated by PHPUnit on 2012-03-09 at 21:22:33.
 */
class SimpleExamTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SimpleExam
     */
    protected $exam;
    
    protected $triggeredEvents = array();

    /**
     * Sets up the exam to be used
     */
    protected function setUp()
    {
        $this->exam = new SimpleExam();
    }

    /**
     * @covers PHPPeru\Exam\SimpleExam::start
     * @covers PHPPeru\Exam\SimpleExam::isStarted
     */
    public function testStart()
    {
        $this->exam->start();
        $this->assertTrue($this->exam->isStarted());
        $this->assertFalse($this->exam->isNew());
        $this->assertFalse($this->exam->isAborted());
        $this->assertFalse($this->exam->isCompleted());
    }

    /**
     * @covers PHPPeru\Exam\SimpleExam::abort
     * @covers PHPPeru\Exam\SimpleExam::isAborted
     */
    public function testAbort()
    {
        $this->exam->start();
        $this->exam->abort();
        $this->assertTrue($this->exam->isAborted());
        $this->assertFalse($this->exam->isNew());
        $this->assertFalse($this->exam->isStarted());
        $this->assertFalse($this->exam->isCompleted());
    }

    /**
     * @covers PHPPeru\Exam\SimpleExam::complete
     * @covers PHPPeru\Exam\SimpleExam::isCompleted
     * @todo Implement testComplete().
     */
    public function testComplete()
    {
        $this->exam->start();
        $this->exam->complete();
        $this->assertTrue($this->exam->isCompleted());
        $this->assertFalse($this->exam->isNew());
        $this->assertFalse($this->exam->isStarted());
        $this->assertFalse($this->exam->isAborted());
    }

    /**
     * Checks that newly created exams are marked as new 
     *
     * @covers PHPPeru\Exam\SimpleExam::isNew
     */
    public function testIsNew()
    {
        $this->assertTrue($this->exam->isNew());
        $this->assertFalse($this->exam->isStarted());
        $this->assertFalse($this->exam->isAborted());
        $this->assertFalse($this->exam->isCompleted());
    }
    

    /**
     * Checks that newly created exams have an associated event dispatcher 
     *
     * @covers PHPPeru\Exam\SimpleExam::isNew
     */
    public function testGetEventDispatcher()
    {
        $this->assertInstanceOf(
            'Symfony\Component\EventDispatcher\EventDispatcherInterface',
            $this->exam->getEventDispatcher()
        );
    }

    /**
     * Checks that events regarding the lifecycle are triggered correctly and
     * in the correct order when starting and completing an exam.
     */
    public function testEventsAreDispatchedDuringCompletedLifecycle()
    {
        $startListener = $this->getMock('stdClass', array('startCallback'));
        $startListener
            ->expects($this->once())
            ->method('startCallback')
            ->with($this->isInstanceOf('PHPPeru\Exam\Event'));
        $completeListener = $this->getMock('stdClass', array('completeCallback'));
        $completeListener
            ->expects($this->once())
            ->method('completeCallback')
            ->with($this->isInstanceOf('PHPPeru\Exam\Event'));
        $abortListener = $this->getMock('stdClass', array('abortCallback'));
        $abortListener
            ->expects($this->never())
            ->method('abortCallback');
        $evd = $this->exam->getEventDispatcher();
        $evd->addListener(
            SimpleExam::EVENT_START,
            array($startListener, 'startCallback')
        );
        $evd->addListener(
            SimpleExam::EVENT_COMPLETE,
            array($completeListener, 'completeCallback')
        );
        $evd->addListener(
            SimpleExam::EVENT_ABORT,
            array($abortListener, 'abortCallback')
        );
        $this->exam->start();
        $this->exam->complete();
    }
    
    /**
     * Checks that events regarding the lifecycle are triggered correctly and
     * in the correct order when starting and aborting an exam.
     */
    public function testEventsAreDispatchedDuringAbortedLifecycle()
    {
        $startListener = $this->getMock('stdClass', array('startCallback'));
        $startListener
            ->expects($this->once())
            ->method('startCallback')
            ->with($this->isInstanceOf('PHPPeru\Exam\Event'));
        $completeListener = $this->getMock('stdClass', array('completeCallback'));
        $completeListener
            ->expects($this->never())
            ->method('completeCallback');
        $abortListener = $this->getMock('stdClass', array('abortCallback'));
        $abortListener
            ->expects($this->once())
            ->method('abortCallback')
            ->with($this->isInstanceOf('PHPPeru\Exam\Event'));
        $evd = $this->exam->getEventDispatcher();
        $evd->addListener(
            SimpleExam::EVENT_START,
            array($startListener, 'startCallback')
        );
        $evd->addListener(
            SimpleExam::EVENT_COMPLETE,
            array($completeListener, 'completeCallback')
        );
        $evd->addListener(
            SimpleExam::EVENT_ABORT,
            array($abortListener, 'abortCallback')
        );
        $this->exam->start();
        $this->exam->abort();
    }

    /**
     * Checks that exception is thrown for when Exam cannot be started
     * @return mixed
     */
    public function testThrowBadMethodCallExceptionWhenExamCannotBeStarted()
    {
        $this->setExpectedException('BadMethodCallException');
        $this->exam->start();
        $this->exam->start();
    }

    /**
     * Checks that exception is thrown for when Exam cannot be completed
     * @return mixed
     */
    public function testThrowBadMethodCallExceptionWhenExamCannotBeCompleted()
    {
        $this->setExpectedException('BadMethodCallException');
        $this->exam->start();
        $this->exam->complete();
        $this->exam->complete();
    }

    /**
     * Checks that exception is thrown for when Exam cannot be aborted
     * @return mixed
     */
    public function testThrowBadMethodCallExceptionWhenExamCannotBeAborted()
    {
        $this->setExpectedException('BadMethodCallException');
        $this->exam->start();
        $this->exam->abort();
        $this->exam->abort();
    }
}